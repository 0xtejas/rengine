name: 💬 Auto Comment

on:
  issues:
    types: [opened]
  pull_request:
    types: [opened, closed]

permissions:
  issues: write
  pull-requests: write

jobs:
  auto_comment:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      
      - name: 🤖 Auto Comment on Issues and PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const author = context.payload.sender.login;
            
            console.log('Current actor:', context.actor);
            console.log('Event name:', context.eventName);
            console.log('Action:', context.payload.action);
            
            async function createComment(issueNumber, body) {
              try {
                const response = await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: issueNumber,
                  body: body
                });
                console.log('Comment created by:', response.data.user.login);
                console.log(`Comment created successfully for ${context.eventName} #${issueNumber}`);
              } catch (error) {
                console.error(`Error creating comment for ${context.eventName} #${issueNumber}:`, error);
                core.setFailed(`Failed to create comment: ${error.message}`);
              }
            }
            
            try {
              if (context.eventName === 'issues' && context.payload.action === 'opened') {
                const issue = await github.rest.issues.get({
                  owner,
                  repo,
                  issue_number: context.issue.number
                });
                
                const isFeatureRequest = issue.data.title.toLowerCase().includes('feature request') || 
                                         issue.data.body.toLowerCase().includes('feature request');
                
                let commentBody;
                if (isFeatureRequest) {
                  commentBody = `Hey @${author}! 👋 Thanks for your feature request! 💡

                  We love hearing new ideas from our community. Here's what happens next:

                  1. 📋 Our team will review your suggestion
                  2. 💬 We might reach out for more details if needed
                  3. 🔍 We'll evaluate how it fits with our roadmap
                  4. 📢 We'll update you on the status

                  Thanks for helping make reNgine even better! 🚀`;
                } else {
                  commentBody = `Hey @${author}! 👋 Thanks for flagging this! 🐛🐞

                  Before we dig in, Let's make sure you have:

                  🔍 Gone through the documentation: https://rengine.wiki
                  🕵️ Make sure it's not a known issue
                  📝 Provided us all the details related to this bug`;
                }
                
                await createComment(context.issue.number, commentBody);
              } else if (context.eventName === 'pull_request') {
                const prNumber = context.payload.pull_request.number;
                let commentBody;
                
                if (context.payload.action === 'opened') {
                  commentBody = `Woohoo @${author}! 🎉 You've just dropped some hot new code! 🔥

                  Hang tight while we review this! You rock! 🤘`;
                } else if (context.payload.action === 'closed') {
                  commentBody = `Holy smokes, @${author}! 🤯 You've just made reNgine even more awesome!

                  Your code is now part of the reNgine hall of fame. 🏆 
                  
                  Keep the cool ideas coming - maybe next time you'll break the internet! 💻💥

                  Virtual high fives all around! 🙌`;
                }
                
                if (commentBody) {
                  await createComment(prNumber, commentBody);
                } else {
                  console.log(`No action taken for pull request ${context.payload.action} event`);
                }
              }
            } catch (error) {
              console.error('Error in workflow:', error);
              core.setFailed(`Workflow failed with error: ${error.message}`);
            }